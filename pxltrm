#!/usr/bin/env bash
#
# A pixel art editor for the terminal.

get_term_size() {
    printf '\e[18t'
    IFS=';t' read -d t -t 0.05 -sr _ lines columns
}

clear_screen() {
    printf '%b' '\e[2J\e[1;1H\e[0m\n\n'
}

status_line() {
    local status block_char

    # Generate block width based on terminal width.
    printf -v block_width "%$(("${columns:=80}" / 16))s" ""
    printf -v padding "%$((columns / 4))s" ""

    for i in {1..8}; do
        ((i==color)) && block_char="▃" || block_char=" "
        ((i>7)) && i="8;5;$i"
        status+="\\e[4${i}m\\e[30m${block_width// /${block_char}}\\e[0m"
    done

    printf '\e[s\e[0;0H'
    printf "%b%$((columns-${#usage}*10/25))s" '\e[1mpxltrm 0.0.1\e[0m' "$usage"
    printf '%b' "\\e[${lines};0H${padding}${status}"
    printf '%b' "\\e[${columns}D\\e[1A${padding}${status//▃/ }"
    printf '\e[u'
}

status_line_clean() {
    printf '%b' "\\e[s\\e[$((lines-2));0H\\e[0J\\e[u"
}

cursor() {
    : "${1: -1}"

    case "${1: -1}" in
        # Cursor Movement.
        A|k): '\e[1A' ;;
        B|j): '\e[1B' ;;
        C|l): '\e[1C' ;;
        D|h): '\e[1D' ;;

        # Color Selection.
        [1-8]) color="${1: -1}" ;;

        # Drawing Cells.
        d): "\\e[38;5;${color}m█\\e[1D" ;;
        e): "\\e[38;5;0m█\\e[1D" ;;

        # Other.
        *) return ;;
    esac

    printf '%b' "$_"
}

main() {
    [[ "$1" == "-v" ]] && { set -x; unset PATH; }

    clear_screen
    get_term_size

    trap 'clear_screen' EXIT
    trap 'status_line_clean; get_term_size; status_line' SIGWINCH

    usage="colors: [0-8] - draw: d - erase: e"

    while :; do
        status_line
        read -rs -N 1 key
        cursor "$key"
    done
}

main "$@"
